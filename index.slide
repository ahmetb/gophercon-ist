How Go made me a better engineer?
GopherCon Turkey, 18 December 2021

Ahmet Alp Balkan
Software Engineer, Google
https://twitter.com/ahmetb

*  Hakkimda

10 yildir acik kaynakli cloud compute infrastructure (Docker,
Kubernetes, serverless) ve developer tools uzerine calisiyorum.

Bu surenin cogunda programlama dili olarak sadece Go kullandim.

# * Bu sunum
# - Kariyer tavsiyesi degil.
# - "Go oteki dillerden iyidir" tartismasi degil.
# - Go reklami degil.
# - "Go beni nasil daha iyi bir muhendis yapti" uzerine bir analiz.

* Go neden gelistirildi?

* Google

- O(10,000) muhendis
- O(1,000) servis
- <10 izin verilen programlama dili
-  Codebase'in cogunlugu Java, C++, Python

Problemler:

1. Bu dillerin Google icindeki ve disindaki kullanimi cok farkli.
2. Yeni mezun muhendisler bu dillerde uzmanlasmakta zorluk cekiyor.

* Cozum: Go?

Dilin icerideki & disaridaki versiyonu ayni (ayni stdlib, ayni style guide).

Kullandiginiz oteki dillere (Python, C, Java vb.) benziyor.

Kodu okumak bu dillere gore cok daha kolay. Minimalist.

* Go beni nasil degistirdi?

* Iyi bir muhendisten beklentiler

- Yeni bir projeye/ortama hizli ayak uydurabilmesi.
- Aklindaki plani production-ready koda dokebilmesi.
- Karsilastigi problemleri kendi basina (ya da az bir yardimla) cozebilmesi.

Kullandiginiz oteki diller bunlari ne kadar kolaylastiriyor?

* Go vs oteki diller

Google "how to X in Java" ➔ Stack Overflow ➔ kopyala/yapistir ➔
anlasilamayan hata ➔ Google'da hatayi ara ➔ cozum.

*Go'da:*

- Ne yapmaya calistigini anla
- Nasil yapildigini ogren
- Go stdlib kullanarak implement et
- Hata varsa mesaji oku, kaynak koduna bak

* Somut ornek: list files in a tar.gz archive

Java:

- "You can do this with the Apache Commons Compress library. "
- "I recommend using TrueZIP. It's really good. It's an excellent, fast library. It has TAR drivers, and can handle *.tar.gz and *.tar.bz2 files. The JavaDocs are clear and complete, though I found the standalone tutorials insufficient - I had to read the JavaDoc to get things working."

Go:

	t := gzip.NewReader(tar.Reader(r))
	for {
		hdr, err := t.Next()
		if err == io.EOF { break }
		fmt.Println(hdr.Name, hdr.Mode, hdr.Size)
	}

* Go standard library

- Stdlib'de neler olmali ve olmamali konusunda bir ders.

- Uretkenlik ve gelistiriciye dogru methodlari vermek arasindaki ince denge.

- Low-level konseptlerin farkinda olarak kod yazdiran abstraction'lar
  (`os`, `io`, `bufio`, `net`, `net/http`...)

- Kaynak kodu kolayca okunabiliyor.

- Go'da bir kutuphane nasil tasarlanmali diye ornek oluyor.

* Bir egitim araci olarak Go stdlib

- Parsing: `text/template`
- Format: `encoding/json`
- Protocol: `net/http`, `net/smtp`
- Syscalls: `os`, `os/exec`

* Go ile reliable programlar yazmak

Kullandiginiz dil/framework stres altinda nasil davraniyor?

- Kolay anlasilir runtime behavior
- Kolay anlasilir memory kullanimi (anlasilabilen veri yapilari)
- Tahmin edilebilir kutuphane icerigi

Oteki dillerin gizlemeye calistigi detayli ayarlar (connection pooling,
timeout'lar, concurrency limitleri, buffer size, ...) Go'da gelistiriciye sunuluyor.

* Go ile infrastructure engineering ve distributed systems

Aklinizdaki fikri dogrudan implementasyona dokebilmek icin ideal.

Runtime'in bottleneck olmadigi (networked) sistemlerde Go ile anlasilabilir ve maintain edilebilir implementasyonlar yapmak mumkun.

- Control plane API'lar (orn. Kubernetes)
- OS ile etkilesen parcalar (orn. Docker, Kubernetes)
- Dagitik veritabanlari (orn. etcd, TiKV, groupcache, CockroachDB)

Bir cok open source maintainer kariyer imkani.

* Go'ya yeni baslayanlara tavsiyeler

- Perdenin arkasina bakin
- Stdlib ve oteki paketleri okuyun
- Go ile GNU coreutils araclarini reimplement edin (`rm`, `tail`, `uniq` vb.)
- Baska dillerdeki aliskanliklarinizi Go'ya getirmeyin
- Go'nun tasarimindaki felsefeyi anlamaya calisin

* Calisma ortaminiza Go'yu getirmek

- Farkli diller kullanan gelistiriciler icin basit bir ortak nokta.
- Ufak automation araclari ve developer tool'lar gelistirin.
- Yeni basladiginiz ufak bir altyapi projesini Go ile yapmayi deneyin.